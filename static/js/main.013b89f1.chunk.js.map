{"version":3,"sources":["utils/youtube.js","components/Video.js","components/MenuButton.js","components/MenuGridButton.js","components/Panel.js","App.js","serviceWorker.js","index.js"],"names":["parseYoutubeVideoUrl","youtubeVideoCode","ytId","match","RegExp","$1","Video","videoUrl","video","onDeletedClick","className","src","isEmpty","type","danger","onClick","size","MenuButton","onVideoAdded","useState","isVisible","setVisible","Form","useForm","form","handleOk","submit","handleCancel","shape","title","visible","onOk","onCancel","closable","footer","key","loading","layout","onFinish","embeddedVideoSrc","resetFields","closeable","Item","label","name","rules","required","message","columns","MenuGridButton","onChangedGrid","useEffect","setFieldsValue","map","col","Option","value","saveLocal","data","sessionStorage","setItem","toString","Panel","videos","setVideoList","setColumns","deleteVideo","newVideoList","reject","propEq","prevList","JSON","parse","getItem","isNil","href","style","bottom","right","position","zIndex","width","newColumns","videoAdded","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.013b89f1.chunk.js","sourcesContent":["const matchYoutubeUrl = (url) => {\r\n  const p = /^(?:https?:\\/\\/)?(?:www\\.)?(?:youtu\\.be\\/|youtube\\.com\\/(?:embed\\/|v\\/|watch\\?v=|watch\\?.+&v=))((\\w|-){11})(?:\\S+)?$/;\r\n  return (url.match(p)) ? RegExp.$1 : false ;\r\n};\r\n\r\nexport const parseYoutubeVideoUrl = youtubeVideoCode => {\r\n  const ytId = matchYoutubeUrl(youtubeVideoCode);\r\n  return `https://www.youtube.com/embed/${ytId}`;\r\n};\r\n","import React from 'react';\r\nimport { parseYoutubeVideoUrl } from '../utils/youtube';\r\nimport { Button } from 'antd';\r\nimport { match, isEmpty } from 'ramda';\r\n\r\nconst Video = ({ video, onDeletedClick = () => {} }) => {\r\n  const parseVideoUrl = videoUrl => {\r\n    const ytRegex = /^((?:https?:)?\\/\\/)?((?:www|m)\\.)?((?:youtube\\.com|youtu.be))(\\/(?:[\\w\\-]+\\?v=|embed\\/|v\\/)?)([\\w\\-]+)(\\S+)?$/gm;\r\n    return !isEmpty(match(ytRegex, videoUrl.src)) ? parseYoutubeVideoUrl(videoUrl.src) : videoUrl.src;\r\n  };\r\n\r\n  return (\r\n    <div className={'video-responsive relative'}>\r\n      <iframe src={parseVideoUrl(video)}>\r\n      </iframe>\r\n      <div className={'absolute bottom-0 right-0 p-1 text-right'}>\r\n        <Button type=\"primary\" danger={true} onClick={() => onDeletedClick(video)} size={'small'}>Deleter</Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Video;\r\n","import React, { useState } from 'react';\r\nimport {Button, Modal, Form, Input} from 'antd';\r\n\r\nconst MenuButton = ({ onVideoAdded = () => {} }) => {\r\n  const [isVisible, setVisible] = useState(false);\r\n  const [form] = Form.useForm();\r\n\r\n  const handleOk = () => {\r\n    form.submit();\r\n  };\r\n  const handleCancel = () => { setVisible(false); };\r\n  const onFinish = ({ embeddedVideoSrc }) => {\r\n    onVideoAdded({\r\n      src: embeddedVideoSrc\r\n    });\r\n    setVisible(false);\r\n    form.resetFields();\r\n  };\r\n  const loading = false;\r\n\r\n  return (\r\n    <div className={'inline-block'}>\r\n      <Button\r\n        type=\"primary\" shape=\"round\" size={'small'}\r\n        onClick={() => setVisible(true)}\r\n      >\r\n        Add Video\r\n      </Button>\r\n      <Modal\r\n        title=\"Add video\"\r\n        visible={isVisible}\r\n        onOk={handleOk}\r\n        onCancel={handleCancel}\r\n        closable={true}\r\n        footer={[\r\n          <Button key=\"back\" onClick={handleCancel}>\r\n            Cancel\r\n          </Button>,\r\n          <Button key=\"submit\" type=\"primary\" loading={loading} onClick={handleOk}>\r\n            Submit\r\n          </Button>,\r\n        ]}\r\n      >\r\n        <Form\r\n          layout={'vertical'}\r\n          onFinish={onFinish}\r\n          form={form}\r\n          closeable={true}\r\n        >\r\n          <Form.Item\r\n            label=\"Embedded Video Url\"\r\n            name=\"embeddedVideoSrc\"\r\n            rules={[{ required: true, message: 'The field is required' }]}\r\n          >\r\n            <Input />\r\n          </Form.Item>\r\n        </Form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MenuButton;\r\n","import React, { useState, useEffect } from 'react';\r\nimport {Button, Modal, Form, Select} from 'antd';\r\nimport {map} from \"ramda\";\r\n\r\nconst columns = [2, 3, 4, 5, 6];\r\n\r\nconst MenuGridButton = ({ onChangedGrid = () => {} }) => {\r\n  const [isVisible, setVisible] = useState(false);\r\n  const [form] = Form.useForm();\r\n\r\n  useEffect(() => {\r\n    form.setFieldsValue({});\r\n  }, [form]);\r\n\r\n  const handleOk = () => {\r\n    form.submit();\r\n  };\r\n  const handleCancel = () => { setVisible(false); };\r\n  const onFinish = ({columns}) => {\r\n    onChangedGrid(columns);\r\n    setVisible(false);\r\n    form.resetFields();\r\n  };\r\n\r\n  const loading = false;\r\n\r\n  return (\r\n    <div className={'inline-block'}>\r\n      <Button\r\n        type=\"primary\" shape=\"round\" size={'small'}\r\n        onClick={() => setVisible(true)}\r\n      >\r\n        Change Columns\r\n      </Button>\r\n      <Modal\r\n        title=\"Add video\"\r\n        visible={isVisible}\r\n        onOk={handleOk}\r\n        onCancel={handleCancel}\r\n        closeable={true}\r\n        footer={[\r\n          <Button key=\"back\" onClick={handleCancel}>\r\n            Cancel\r\n          </Button>,\r\n          <Button key=\"submit\" type=\"primary\" loading={loading} onClick={handleOk}>\r\n            Submit\r\n          </Button>,\r\n        ]}\r\n      >\r\n        <Form\r\n          layout={'vertical'}\r\n          onFinish={onFinish}\r\n          form={form}\r\n        >\r\n          <Form.Item\r\n            label=\"Columns\"\r\n            name=\"columns\"\r\n            rules={[{ required: true, message: 'The field is required' }]}\r\n          >\r\n            <Select>\r\n              {\r\n                map(col => (\r\n                  <Select.Option value={col}>{`${col} columns`}</Select.Option>\r\n                ), columns)\r\n              }\r\n            </Select>\r\n          </Form.Item>\r\n        </Form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MenuGridButton;\r\n","import React, { useState, useEffect } from 'react';\r\nimport {map, toString, isNil, reject, propEq} from 'ramda';\r\nimport Video from \"./Video\";\r\nimport MenuButton from \"./MenuButton\";\r\nimport MenuGridButton from \"./MenuGridButton\";\r\n\r\nconst VIDEO_LIST_NAME = 'RO_VIDEO_LIST_NAME';\r\nconst saveLocal = data => sessionStorage.setItem(VIDEO_LIST_NAME, toString(data));\r\nconst getLocal = () => JSON.parse(sessionStorage.getItem(VIDEO_LIST_NAME));\r\n\r\nconst Panel = () => {\r\n  const [videos, setVideoList] = useState([]);\r\n  const [columns, setColumns] = useState(2);\r\n\r\n  const onVideoAdded = videoAdded => {\r\n    const newVideoList = [\r\n      ...videos,\r\n      videoAdded\r\n    ];\r\n    setVideoList(newVideoList);\r\n    saveLocal(newVideoList);\r\n  };\r\n\r\n  const onDeletedClick = deleteVideo => {\r\n    const newVideoList = reject(propEq('src', deleteVideo.src), videos);\r\n    setVideoList(newVideoList);\r\n    saveLocal(newVideoList);\r\n  };\r\n\r\n  const onChangedGrid = newColumns => {\r\n    setColumns(newColumns)\r\n  };\r\n\r\n  useEffect(() => {\r\n    const prevList = getLocal();\r\n    if(!isNil(prevList)) {\r\n      setVideoList(prevList)\r\n    }\r\n  }, [setVideoList]);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"w-full mx-auto py-1 px-4\">\r\n        <div className=\"w-full flex items-center justify-between\">\r\n          <a\r\n            className=\"flex items-center text-indigo-400 no-underline hover:no-underline font-bold text-2xl lg:text-4xl\"\r\n            href=\"#\">\r\n            Video Multiplier\r\n          </a>\r\n          <div className=\"flex items-center text-right\">\r\n            <div>\r\n              <p className=\"leading-none m-0\">Add your video url and it will embed in a frame view. You need to verify if your video can be embedded.</p>\r\n              <p className=\"leading-none m-0\">In youtube video case, we gonna parse all the urls.</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className={'flex flex-wrap --mx-1 min-h-screen bg-gray-200'}>\r\n        {\r\n          map( video => (\r\n            <div className={`w-full md:w-1/${columns}`}>\r\n              <Video video={video} onDeletedClick={onDeletedClick}/>\r\n            </div>\r\n          ), videos)\r\n        }\r\n      </div>\r\n      <div style={{bottom: 10, right: 10, position: 'fixed', zIndex: 2, width: 230}} className={'flex justify-between'}>\r\n        <MenuGridButton onChangedGrid={onChangedGrid}/>\r\n        <MenuButton onVideoAdded={onVideoAdded}/>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Panel;\r\n","import React from 'react';\nimport Panel from './components/Panel';\nimport './App.css';\nimport 'antd/dist/antd.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Panel />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}